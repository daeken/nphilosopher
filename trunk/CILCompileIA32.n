using System;
using System.Collections;

namespace NPhilosopher {
	public module CILCompileIA32 {
		public CompileAssembly(assembly : NAssembly) : void {
			| Assembly(_, types) =>
				CompileList(types);
			
			| Type(_, members) =>
				CompileList(members);
			
			| Method(name, _, _, blocks) when blocks != null =>
				System.Console.WriteLine(name);
				CompileBlock(blocks, 0);
			
			| _ => ();
		}
		
		CompileList(obj : list [NAssembly]) : void {
			| [] => ();
			| head :: tail =>
				CompileAssembly(head);
				CompileList(tail);
		}
		
		CompileBlock(blocks : Hashtable, start : int) : void {
			match(blocks[start] :> NIL.Block) {
				| Block(_, insts) =>
					foreach(inst :> NIL.Inst in insts)
						CompileInst(inst);
			}
		}
		
		CompileInst(inst : NIL.Inst) : void {
			match(CILToStack.ConvertInst(inst)) {
				| null => ()
				
				| x => Console.WriteLine("{0}", x)
			}
		}
	}
}
